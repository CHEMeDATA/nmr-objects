// file: createListObjects.js
import fs from "fs/promises";
import path from "path";
import fetch from "node-fetch";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const ORG = "CHEMeDATA";
const SRC_DIR = "scratch";
const BODY_STATEMENT = "extraMethodsStatements";
const ALL_JSON_FILE = "all_tools.json";


export async function createListObjects() {
	// clean scratch dir
	await fs.rm(SRC_DIR, { recursive: true, force: true });
	await fs.mkdir(SRC_DIR, { recursive: true });

	console.log("Start scripts/createListObjects.js");

	// Get list of repos
	const reposResp = await fetch(
		`https://api.github.com/orgs/${ORG}/repos?per_page=100`
	);
	const repos = (await reposResp.json()).map((r) => r.name);

	const allJson = {
		comment: "Generated by createListObjects.js in nmr-objects for schema",
		list: [],
	};

	let counter = 0;

	for (const repo of repos) {
		// Skip repos with "." or wrong dash count
		if (repo.includes(".") || (repo.match(/-/g) || []).length !== 1) {
			console.log(`Skip ${repo} : invalid repository name format`);
			continue;
		}

		const repoUrl = `https://raw.githubusercontent.com/${ORG}/${repo}/main/${BODY_STATEMENT}.json`;
		const repoDir = path.join(SRC_DIR, repo);
		const filePathJson = path.join(repoDir, `${BODY_STATEMENT}.json`);
		const filePathTxt = path.join(repoDir, `${BODY_STATEMENT}.txt`);

		await fs.mkdir(repoDir, { recursive: true });

		try {
			const res = await fetch(repoUrl);
			if (!res.ok) throw new Error("❌ Not found");
			const json = await res.json();

			// Save json
			await fs.writeFile(filePathJson, JSON.stringify(json, null, 2));

			// Extract listObject[].object and type
			const entries = (json.listObject || []).map(
				(o) => `${o.object} ${o.type}`
			);
			await fs.writeFile(filePathTxt, entries.join("\n"));

			if (entries.length > 0) {
				if (counter > 0) {
					// push into list
				}
				counter++;
				allJson.list.push(json);

				const [objName, objType] = repo.split("-");
				console.log(
					`✅For repository '${repo}' (${objName},${objType}), Found a ${BODY_STATEMENT}.json:`
				);

				for (const entry of entries) {
					const [objectStatement, typeStatement] = entry.split(" ");
					if (
						!objectStatement ||
						!["import", "export", "viewer"].includes(typeStatement)
					) {
						continue;
					}

					console.log(
						`  Entry Object='${objectStatement}', Type='${typeStatement}'`
					);

					if (typeStatement === "import") {
						await appendUnique(path.join(SRC_DIR, "import.txt"), repo);
					}
					if (typeStatement === "export") {
						await appendUnique(path.join(SRC_DIR, "export.txt"), repo);
					}
					if (typeStatement === "viewer") {
						await appendUnique(path.join(SRC_DIR, "viewer.txt"),repo);
					}
				}
			} else {
				await fs.rm(repoDir, { recursive: true, force: true });
				console.log(`Skip ${repo} : No ${BODY_STATEMENT}.txt file`);
			}
		} catch (err) {
			await fs.rm(repoDir, { recursive: true, force: true });
			console.log(`Skip ${repo} : fetch failed`);
		}
	}

	// Write final all_tools.json
	await fs.writeFile(ALL_JSON_FILE, JSON.stringify(allJson, null, 2));

	console.log("Finished writing", ALL_JSON_FILE);
}

// helper: append without duplicates
async function appendUnique(file, line) {
	let existing = "";
	try {
		existing = await fs.readFile(file, "utf8");
	} catch (_) {}
	const lines = new Set(existing.split("\n").filter(Boolean));
	lines.add(line);
	await fs.writeFile(file, Array.from(lines).join("\n"));
}

// Run directly
	createListObjects().catch((err) => {
		console.error("Error:", err);
		process.exit(1);
	});

